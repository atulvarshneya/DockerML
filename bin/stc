#!/bin/bash

## Initialized values for running the project container
NAME=""
WORKAREA=""
MOUNTPOINT=""
IMAGE=""
PROJ_PROPS="./.project_props"

## variables for command line arguments
CONTAINER_SHELL="/bin/bash"
launch_command=
cleanup=
verbose=

##
## Simple command line arguments parsing
##
USAGE=$(cat <<EOM
Usage: `basename $0` OPTIONS
Options:
-c cmd   Run command        Runs this cmd instead of the default one in the
                            container image.
-f file  Project Props file Uses the filename instead of ./.project_props
                            file to read in the project container parameters.
-h       Help               Prints this help text.
-i       Interactive mode   Interactive /bin/bash prompt from within the
                            container. Shortcut for -c /bin/bash.
-v       Verbose            Prints the container commandline parameters
                            before starting the container.
-X       Cleanup            Kills and removes any running or exited container
                            instance with the project name.
EOM
)
while getopts ":c:iXvhf:" arg; do
	case $arg in
		c)
			launch_command="$OPTARG"
			;;
		i)
			launch_command="$CONTAINER_SHELL"
			;;
		X)
			cleanup="YES"
			;;
		v)
			verbose="YES"
			;;
		f)
			PROJ_PROPS="$OPTARG"
			;;
		h)
			echo "$USAGE"
			exit 0
			;;
		\?)
			echo "$USAGE"
			exit 1
			;;
	esac
done

##
## flag to track if some fatal error occured wrt information provided
##
failed=0

##
## read the project properties file and setup the variables
##
if [ -r $PROJ_PROPS ]; then
	while IFS="=" read -r key value; do
	key="$(echo -e "${key}" | tr -d '[:space:]')"
		case "$key" in
		    '#'*)
			;;
		    "NAME")
			NAME=$value
			;;
		    "WORKAREA")
			eval "WORKAREA=$value"
			;;
		    "IMAGE")
			eval "IMAGE=$value"
			;;
		    "")
			# ignore empty lines
			;;
		    *)
			echo "ERROR: Invalid entry \"$key\" in $PROJ_PROPS" 1>&2
			failed=1
			;;
		esac
	done < "$PROJ_PROPS"
else
	echo "ERROR: Project Properties file $PROJ_PROPS not found." 1>&2
	exit 1
fi

##
## Were all required parameters provided
##
for par in NAME WORKAREA IMAGE; do
	eval parval=\$$par
	if [ -z "$parval" ]; then
		echo "ERROR: $PROJ_PROPS does not provide value for $par." 1>&2
		failed=1
	fi
done

##
## Does the provided WORKAREA path exist?
##
if [ ! -d "$WORKAREA" ]; then
	echo "ERROR: WORKAREA directory $WORKAREA does not exist. Exiting..." 1>&2
	failed=1
fi

##
## Everything was OK, or was there a problem with any of the paramerts?
##
if [ "$failed" -eq 1 ]; then
	exit 1
fi

WORKAREA=$(cd $WORKAREA; pwd)
MOUNTPOINT=`basename $WORKAREA`

## cleanup -- kill the container if it is running, and remove the container if it exists
isthere=`docker ps -a -f "name=$NAME" -q`
if [ -n "$isthere" ]; then
	isrunning=`docker ps -a -f "status=running" -q`
	if [ -n "$isrunning" ]; then
		echo "KILLING container $NAME ..."
		docker kill $NAME
	fi
	echo "REMOVING container $NAME ..."
	docker rm $NAME
fi

if [ -z "$cleanup" ]; then
	## run the image with appropriate container name, and mount locations
	if [ -n "$verbose" ]; then
		echo "NAME       $NAME"
		echo "IMAGE      ${IMAGE}"
		echo "WORKAREA   $WORKAREA"
		echo "MOUNTPOINT $MOUNTPOINT"
		echo "COMMAND    ${launch_command:-No Command}"
		echo
		echo "STARTING project container..."
	fi
	docker run --name $NAME -it --rm -v $WORKAREA:/notebooks/$MOUNTPOINT -p 8888:8888 ${IMAGE} ${launch_command}
fi
